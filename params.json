{"name":"Conneg-bundle","tagline":"Symfony2 Bundle providing content a negotiation service.","body":"# ConNeg Bundle\r\n\r\n\r\nA Symfony2 Bundle providing content negotiation services you your application, built for PHP >= 5.3 using the [ptlis/ConNeg](https://github.com/ptlis/conneg) packages.\r\n\r\n[![Build Status](https://travis-ci.org/ptlis/conneg-bundle.png?branch=master)](https://travis-ci.org/ptlis/conneg-bundle) [![Code Coverage](https://scrutinizer-ci.com/g/ptlis/conneg-bundle/badges/coverage.png?s=38ad9458830dccd8bce51a4078c2faa259f8fcaf)](https://scrutinizer-ci.com/g/ptlis/conneg-bundle/) [![Scrutinizer Quality Score](https://scrutinizer-ci.com/g/ptlis/conneg-bundle/badges/quality-score.png?s=4c8c1c746a83a5e7377f06df3c5072691976671e)](https://scrutinizer-ci.com/g/ptlis/conneg-bundle/) [![Latest Stable Version](https://poser.pugx.org/ptlis/conneg-bundle/v/stable.png)](https://packagist.org/packages/ptlis/conneg-bundle)\r\n\r\n\r\n## Installation\r\n\r\n### Add Dependency\r\n\r\nFrom the console:\r\n\r\n```shell\r\n    $ composer require ptlis/conneg-bundle:@dev\r\n```\r\n\r\nOr by Editing composer.json:\r\n\r\n```json\r\n    \"require\": {\r\n        ...\r\n        \"ptlis/conneg-bundle\": \"@dev\",\r\n        ...\r\n    },\r\n```\r\n\r\nFollowed by a composer update:\r\n\r\n```shell\r\n    $ composer update\r\n```\r\n\r\n\r\n### Add Bundle to AppKernel\r\n\r\n```php\r\n    # app/AppKernel.php\r\n    public function registerBundles()\r\n    {\r\n        $bundles = array(\r\n            // ...\r\n            new ptlis\\ConNegBundle\\ptlisConNegBundle(),\r\n        );\r\n    }\r\n```\r\n\r\n\r\n## Usage\r\n\r\n### Negotiation as a Service\r\n\r\nFirstly we must create the negotiation service, this example is for an api that prefers to emit json but may emit xml.\r\n\r\nThe yaml configuration for this service looks like:\r\n\r\n```yaml\r\n    # Resources/config/services.yml\r\n    services:\r\n        // ...\r\n\r\n        mime_best_api:\r\n            class: ptlis\\ConNeg\\Type\\Mime\\MimeTypeInterface\r\n            factory_service: ptlis_con_neg.factory\r\n            factory_method: mimeBest\r\n            arguments:\r\n              - application/json;q=1,application/xml;q=0.8\r\n```\r\n\r\n\r\n#### Via Symfony Controller\r\n\r\nTo retrieve the best match from a controller inheriting from Symfony's base controller use the service locator:\r\n\r\n```php\r\n    # Controllers/MyController\r\n    use Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\r\n\r\n    class MyController extends Controller\r\n    {\r\n        public function indexAction()\r\n        {\r\n            $mimeBest = $this->get('mime_best_api);\r\n\r\n            // Emit appropriate response\r\n        }\r\n    }\r\n```\r\n\r\n\r\n#### Via Service Controller\r\n\r\nTo retrieve the best match from a controller loaded as a service add the service as an argument to your controller:\r\n\r\n```yaml\r\n    # Resources/config/services.yml\r\n    services:\r\n        controller.mime_best:\r\n            class: ptlis\\TestBundle\\Controller\\MimeBest\r\n            arguments:\r\n              - @mime_best_api\r\n```\r\n\r\nAnd store for use when processing the request.\r\n\r\n```php\r\n    # Controllers/MimeBest\r\n    use ptlis\\ConNeg\\TypePair\\TypePairInterface;\r\n\r\n    class MimeBest\r\n    {\r\n        private $mimeBest;\r\n\r\n        public function __construct(TypePairInterface $mimeBest)\r\n        {\r\n            $this->mimeBest = $mimeBest;\r\n        }\r\n\r\n        public function index()\r\n        {\r\n            $this->mimeBest->getType(); // The preferred mime-type\r\n\r\n            // Emit appropriate response\r\n        }\r\n    }\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}